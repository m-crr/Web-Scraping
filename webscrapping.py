# -*- coding: utf-8 -*-
"""WebScrapping

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Zsf5C1C8uQLmos748SVUu8SMXU8Ef5V

### *Installing and importing necessary libraries.*

---
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
from collections import ChainMap
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

"""### *Funtion to parse target weblink.*

---


"""

def parsed_html(url):
  target_url = url
  get_response_target = requests.get(target_url)
  values_from_response = get_response_target.content
  soup_parser = BeautifulSoup(values_from_response, 'html.parser')
  return soup_parser

"""### *Funtion to obtain a list of degree names and infromation.*

---


"""

def get_degree_info(html_info):

  degree_requirements = []
  degree_information = []
  degree_names = []


  for i in html_info:
    get_text = i.text.strip()
    split_text = get_text.split("\n")
    degree_requirements.append(split_text)

  for r in degree_requirements:
    for i in range(1,4):
      r[i] = r[i].split(": ")[1]
    degree_information.append(r)

  for i in degree_information:
    degree_names.append(i[0])

  return degree_information, degree_names

"""### *Obtaining College Names.*

---


"""

url_1 = "https://web.saumag.edu/academics/collegesdepartments/"

parsed_html_1 = parsed_html(url_1)

headers = parsed_html_1.find_all('h2')

college_names = []

for a in headers:
  name = a.get_text()
  college_names.append(name)

print(college_names)

"""### *Rankin College of Business.*

---


"""

url_2 = "https://web.saumag.edu/business/degrees/"

parsed_html_2 = parsed_html(url_2)

div_2= parsed_html_2.find_all('div', class_ = 'more-info')

business_degree_info, business_degree_names = get_degree_info(div_2)

print(business_degree_info)

"""### *College of Education.*

---


"""

url_3 = "https://web.saumag.edu/education/degrees/"

parsed_html_3 = parsed_html(url_3)

div_3= parsed_html_3.find_all('div', class_ = 'more-info')

education_degree_info, education_degree_names = get_degree_info(div_3)

print(education_degree_info)

"""### *College of Liberal and Performing Arts.*

---


"""

url_4 = "https://web.saumag.edu/lpa/majors-minors/"

parsed_html_4 = parsed_html(url_4)

div_4 = parsed_html_4.find_all('div', class_ = 'more-info')

lpa_degree_info, lpa_degree_names = get_degree_info(div_4)

print(lpa_degree_info)

"""### *College of Science and Engineering.*

---


"""

url_5 = "https://web.saumag.edu/science/programs-degrees/"

parsed_html_5 = parsed_html(url_5)

div_5 = parsed_html_5.find_all('div', class_ = 'more-info')

se_degree_info, se_degree_names = get_degree_info(div_5)

print(se_degree_info)

"""### *Consolidating College name, Degree name and information into a pandas dataframe.*

---




"""

combined_degree_info = business_degree_info+education_degree_info+lpa_degree_info+se_degree_info

degrees_pd = pd.DataFrame(combined_degree_info, columns = ['Degree','Hours_Required','Categories','Delivery'])

mapping = ChainMap(dict.fromkeys(business_degree_names,'Rankin College of Buisiness'), dict.fromkeys(education_degree_names,'College of Education'), dict.fromkeys(lpa_degree_names,'Dempsey College of L&PA'), dict.fromkeys(se_degree_names,'College of Science and Engineering'))

degrees_pd.insert(loc = 0, column = 'College', value = degrees_pd['Degree'].map(mapping.get))

degrees_pd.head(10)

degrees_pd[['Delivery_Method_1','Delivery_Method_2','Delivery_Method_3']] = degrees_pd['Delivery'].str.split(", ", expand = True)

degrees_pd.head(10)

degrees_pd[['Category_1','Category_2','Category_3']] = degrees_pd['Categories'].str.split(', ', expand = True)

split_degrees_pd = degrees_pd

split_degrees_pd.head()

split_degrees_pd['On-Campus'] = 'No'
split_degrees_pd['Online'] = 'No'
split_degrees_pd['Hybrid'] = 'No'

split_degrees_pd['Minor'] = 'No'
split_degrees_pd['Major'] = 'No'
split_degrees_pd['Undergraduate'] = 'No'
split_degrees_pd['Certificate_Endorsement'] = 'No'
split_degrees_pd['Associate'] = 'No'
split_degrees_pd['Graduate'] = 'No'

split_degrees_pd.loc[(degrees_pd['Delivery_Method_1'] =='On-Campus') |
       (degrees_pd['Delivery_Method_2'] =='On-Campus') |
       (degrees_pd['Delivery_Method_3'] =='On-Campus'),
       'On-Campus'] = 'Yes'

split_degrees_pd.loc[(degrees_pd['Delivery_Method_1'] =='Online') |
       (degrees_pd['Delivery_Method_2'] =='Online') |
       (degrees_pd['Delivery_Method_3'] =='Online'),
       'Online'] = 'Yes'

split_degrees_pd.loc[(degrees_pd['Delivery_Method_1'] =='Hybrid') |
       (degrees_pd['Delivery_Method_2'] =='Hybrid') |
       (degrees_pd['Delivery_Method_3'] =='Hybrid'),
       'Hybrid'] = 'Yes'

split_degrees_pd.loc[(degrees_pd['Category_1'] =='Minor') |
       (degrees_pd['Category_2'] =='Minor') |
       (degrees_pd['Category_3'] =='Minor'),
       'Minor'] = 'Yes'

split_degrees_pd.loc[(degrees_pd['Category_1'] =='Major') |
       (degrees_pd['Category_2'] =='Major') |
       (degrees_pd['Category_3'] =='Major'),
       'Major'] = 'Yes'

split_degrees_pd.loc[(degrees_pd['Category_1'] =='Undergraduate') |
       (degrees_pd['Category_2'] =='Undergraduate') |
       (degrees_pd['Category_3'] =='Undergraduate'),
       'Undergraduate'] = 'Yes'

split_degrees_pd.loc[(degrees_pd['Category_1'] =='Certificate / Endorsement') |
       (degrees_pd['Category_2'] =='Certificate / Endorsement') |
       (degrees_pd['Category_3'] =='Certificate / Endorsement'),
       'Certificate_Endorsement'] = 'Yes'

split_degrees_pd.loc[(degrees_pd['Category_1'] =='Associate') |
       (degrees_pd['Category_2'] =='Associate') |
       (degrees_pd['Category_3'] =='Associate'),
       'Associate'] = 'Yes'

split_degrees_pd.loc[(degrees_pd['Category_1'] =='Graduate') |
       (degrees_pd['Category_2'] =='Graduate') |
       (degrees_pd['Category_3'] =='Graduate'),
       'Graduate'] = 'Yes'

ref_degrees_pd = split_degrees_pd.drop(['Categories','Delivery','Delivery_Method_1','Delivery_Method_2','Delivery_Method_3','Category_1','Category_2','Category_3','Minor','Major'], axis = 1)

for c_name in ref_degrees_pd:
  ref_degrees_pd[c_name] = ref_degrees_pd[c_name].astype("string")

ref_degrees_pd['Hours_Required'] = pd.to_numeric(ref_degrees_pd['Hours_Required'], errors = 'coerce').fillna(0).astype('int64')

ref_degrees_pd.dtypes

ref_degrees_pd.head()

"""### *Plots for different distributions.*

---




"""

plot = px.histogram(ref_degrees_pd, x='College')

plot.update_layout(xaxis_title = 'College Name', yaxis_title="Number of Degrees", title = "Number Of Degrees Offered By Each College")

plot.show()

average_hours_req = ref_degrees_pd[['College','Hours_Required']]

college_hours = average_hours_req.groupby('College').mean().reset_index()

college_hours

plot_2 = px.bar(college_hours, x=college_hours.index, y=['Hours_Required'])

plot_2.update_layout(xaxis_title = 'College Name', yaxis_title = 'Average Hours', title = 'Average Number of Hours Required For Degree')

plot_2.show()

courses_offered = ref_degrees_pd[['College','Degree','Graduate']]

courses_grouped = courses_offered.groupby(['College','Graduate']).count().reset_index().query("Graduate == 'Yes'")

courses_grouped

plot_3 = px.bar

plot_3 = px.pie(courses_grouped, values = 'Degree', names = 'College', title = "Percentage of Graduate Degrees Offered by College")

plot_3.update_traces(textposition='inside', textinfo='percent+label')

#plot_3.update_layout(xaxis_title = "College Name", yaxis_title = "Number of Degrees", title = "Number of Graduate Degrees In Each College", barmode = 'group')

plot_3.show()

from google.colab import drive
drive.mount('/content/drive')

degrees_pd.to_csv('/content/drive/My Drive/data_raw.csv', index=False)

split_degrees_pd.to_csv('/content/drive/My Drive/data_pre_ref.csv', index=False)

ref_degrees_pd.to_csv('/content/drive/My Drive/data_ref.csv', index=False)